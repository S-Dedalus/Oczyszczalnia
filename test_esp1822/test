/*
   Skrypt wylicza odległość czujnika od powierzchni wody w zbiorniku. Przed użyciem nalezy podac dane:
   nazwa sieci i haslo (linia 86)
   odleglosc do dna pustego zbiornika (linia 115)
   odleglosc od powierzchni przy pełnym zbiorniku (linia 116)
   Warto takze sprawdzic link do Domoticza. */
#include <SoftwareSerial.h>
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>

const int relay = 14; //wyjscie przekznika GPIO14 (D5).

SoftwareSerial mySerial(4, 5); // RX, TX = D2, D1
ESP8266WiFiMulti WiFiMulti;
ESP8266WebServer server(80);

void handleRoot() {
  if (server.hasArg("key1")) {
    Serial.println("Pompa ON");
    digitalWrite(relay, HIGH);
  }

  else if (server.hasArg("key2")) {
    Serial.println("Pompa OFF");
    digitalWrite(relay, LOW);
  }

  boolean stan = digitalRead(14);
  String color = "#33FF00";
  if (stan) {
    color = "#ff0000";
  }
  else {
    color = "#33FF00";
  }
  String content = "<!DOCTYPE html><html><head><style>h1 {text-align: center;}";
  content += "div {background-color: black;width: 315px;border: 2px solid white;padding: 25px;margin: auto;outline: black solid 20px;color: #ffffff;}";
  content += ".button {background-color: #2774c4;border: 2px solid white;color: white;padding: 20px;text-align: center;text-decoration: none;";
  content += "display: inline-block;font-size: 20px;margin: 0px 4px;cursor: pointer;border-radius: 4px;box-shadow: 0 4px #999;}";
  content += ".button:hover {background-color: #0034e5}.button:active {background-color: #0004a6;box-shadow: 0 3px #666;transform: translateY(4px);}";
  content += ".button1 {background-color: #ee5622;border: 2px solid white;color: white;padding: 20px;text-align: center;text-decoration: none;";
  content += "display: inline-block;font-size: 20px;margin: 0px 4px;cursor: pointer;border-radius: 4px;box-shadow: 0 4px #999;}";
  content += ".button1:hover {background-color: #ff0000}.button1:active {background-color: #d60404;box-shadow: 0 3px #666;transform: translateY(4px);}";
  content += ".dot_1 {height: 25px;width: 25px;background-color: %02d;border-radius: 50%;display: inline-block;}", color;
  content += "</style></head><body><h1>Sterowanie</h1><div><p>";
  content += "<a href=\'?key1=1\'><button class='button'>POMPA ON</button><a href=\'?key2=2\'><button class='button1'>POMPA OFF</button></a></p>";
  content += "<p> STAN:&nbsp&nbsp<span class='dot_1'></span></p></div></body></html>";
  server.send(200, "text/html", content);
}

int pomiary[10];
uint16_t pomiar() {
  uint16_t distance = 0;

  mySerial.write(0x55);
  if (mySerial.available()) {

    byte recived[4];
    for (int i = 0; i < 4; i++) {
      int a = mySerial.read();
      recived[i] = a;
    }
    Serial.println("odebrano dane z czytnika");
    if (recived[0] = 0xFF) {
      Serial.println("pierwszy bajt z czytnika poprawny");
      uint32_t crc = 0xFF + recived[1] + recived[2];
      if (recived[3] = crc) {
        Serial.println("poprawna suma kontrolna");
        uint16_t hBit = recived[1];
        uint8_t lBit = recived[2];
        hBit <<= 8;
        distance = hBit | lBit;
        Serial.print("Zmierzona odleglosc = ");
        Serial.print(distance);
        Serial.println(" mm");
      }
      else {
        Serial.println("blad sumy kontrolnej");
      }
    }
    else {
      Serial.println("błąd pierwszego bajta");
    }
  }
  return distance;
}

void sort(int a[], int size) {
  for (int i = 0; i < (size - 1); i++) {
    for (int o = 0; o < (size - (i + 1)); o++) {
      if (a[o] > a[o + 1]) {
        int t = a[o];
        a[o] = a[o + 1];
        a[o + 1] = t;
      }
    }
  }
}

void handleNotFound() {
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";

  for (uint8_t i = 0; i < server.args(); i++) {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
}

void setup() {
  digitalWrite(relay, 0);
  Serial.begin(115200);
  mySerial.begin(9600);
  for (int c = 1; c < 4; c++) {
    Serial.println(" ");
  }
  Serial.println("Zainicjowano Serial");


  for (uint8_t t = 4; t > 0; t--) {
    Serial.printf("[SETUP] WAIT %d...\n", t);
    Serial.flush();
    delay(1000);
  }

  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP("**************", "**************");

  server.on("/", handleRoot);
  server.on("/inline", []() {
    server.send(200, "text/plain", "this works as well");
  });
  server.onNotFound(handleNotFound);
  server.begin();
  Serial.println("HTTP server started");
}


void loop() {
  server.handleClient();
  unsigned long t = 5000;
  static unsigned long _ETimer;
  if ( millis() - _ETimer >= (t)) {
    _ETimer += (t);

    static unsigned int i;
    pomiary[i] = pomiar();

    i++;
    if (i >= 10) {
      sort(pomiary, 10);
      for (int b = 0; b < 10; b++) {
        Serial.println(pomiary[b]);
      }
      int avgPomiary = (pomiary[3] + pomiary[4] + pomiary[5] + pomiary[6]);
      avgPomiary = avgPomiary / 4;
      Serial.print("Ostateczny usredniony wynik pomiarow: ");
      Serial.println(avgPomiary);
      i = 0;
      if ((WiFiMulti.run() == WL_CONNECTED)) {
        WiFiClient client;
        HTTPClient http;
        String domoticzIP = "http://192.168.1.55:8080/json.htm?type=command&param=udevice&idx=38&nvalue=0&svalue=";
        Serial.print("[HTTP] begin...\n");
        uint16_t empty = 2300; //odleglosc do dna pustego zbiornika
        uint16_t full = 300; //odleglosc od powierzchni przy pełnym zbiorniku
        int16_t licznik = (avgPomiary - empty);
        Serial.println(licznik);
        int16_t mianownik = (full - empty);
        Serial.println(mianownik);
        float perc = ((float)licznik / (float)mianownik);
        Serial.println(perc);
        perc = perc * 100;
        Serial.println(perc);
        String link = domoticzIP += perc;
        Serial.println(link);

        if (http.begin(client, link)) { //PROCENTOWO!!!!

          Serial.print("[HTTP] GET...\n");
          // start connection and send HTTP header
          int httpCode = http.GET();

          // httpCode will be negative on error
          if (httpCode > 0) {
            // HTTP header has been send and Server response header has been handled
            Serial.printf("[HTTP] GET... code: %d\n", httpCode);

            // file found at server
            if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
              String payload = http.getString();
              Serial.println(payload);
            }
          } else {
            Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
          }


          http.end();
        }
      }


    }
  }
}
